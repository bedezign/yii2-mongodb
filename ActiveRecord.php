<?php
/**
 * Improves the Yii2 MongoDB ActiveRecord class a little bit by allowing it to have "dynamic attributes".
 * Also, no need to implement the "attributes()" function if you are just using the public properties.
 *
 * @author    Steve Guns <steve@bedezign.com>
 * @package   com.bedezign.yii2.mongodb
 * @copyright 2014 B&E DeZign
 */

namespace bedezign\yii2\mongodb;

class ActiveRecord extends \yii\mongodb\ActiveRecord
{
	protected        $dynamicAttributes = [];
	protected static $_properties       = null;

	public function addDynamicAttribute($name)
	{
		$this->dynamicAttributes[$name] = null;
	}

	public function addDynamicAttributes($names)
	{
		foreach ($names as $name)
			$this->addDynamicAttribute($name);
	}

	public function hasDynamicAttribute($name)
	{
		return array_key_exists($name, $this->dynamicAttributes);
	}

	public function publicProperties()
	{
		if (static::$_properties === null) {
			$class = new \ReflectionClass($this);
			$properties = [];
			foreach ($class->getProperties(\ReflectionProperty::IS_PUBLIC) as $property)
				if (!$property->isStatic())
					$properties[] = $property->getName();

			if (!in_array('_id', $properties))
				array_unshift($properties, '_id');

			static::$_properties = $properties;
		}

		return static::$_properties;
	}

	public function attributes()
	{
		return array_merge(
			$this->publicProperties(),
			array_keys($this->dynamicAttributes)
		);
	}

	public static function populateRecord($record, $row)
	{
		// Just figure out the dynamic attributes and then let the code work the regular way
		$dynamics = array_diff(array_keys($row), $row->attributes());
		$row->addDynamicAttributes($dynamics);

		parent::populateRecord($record, $row);
	}

	public function setDynamic($name, $value)
	{
		$this->addDynamicAttribute($name);
		$this->$name = $value;
	}

	public function __get($name)
	{
		if ($this->hasAttribute($name))
			return $this->dynamicAttributes[$name];
		else
			return parent::__get($name);
	}

	public function __set($name, $value)
	{
		if ($this->hasAttribute($name))
			$this->dynamicAttributes[$name] = $value;
		else
			parent::__set($name, $value); // TODO: Change the autogenerated stub
	}

	public function __unset($name)
	{
		if ($this->hasAttribute($name))
			unset($this->dynamicAttributes[$name]);
		else
			parent::__unset($name);
	}

}